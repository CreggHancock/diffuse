module UI.Playlists.State exposing (..)

import List.Extra as List
import Monocle.Lens as Lens
import Notifications
import Playlists exposing (PlaylistTrack)
import Return exposing (andThen, return)
import Return.Ext as Return exposing (communicate)
import UI.Common.State as Common
import UI.Reply exposing (Reply(..))
import UI.Reply.Translate as Reply
import UI.Types as UI exposing (Manager, Msg(..))



-- ğŸ”±


addTracksToPlaylist : { playlistName : String, tracks : List PlaylistTrack } -> Manager
addTracksToPlaylist { playlistName, tracks } model =
    let
        properPlaylistName =
            String.trim playlistName

        playlistIndex =
            List.findIndex
                (\p -> p.autoGenerated == False && p.name == properPlaylistName)
                model.playlists.collection

        playlistsModel =
            model.playlists

        newCollection =
            case playlistIndex of
                Just idx ->
                    List.updateAt
                        idx
                        (\p -> { p | tracks = p.tracks ++ tracks })
                        playlistsModel.collection

                Nothing ->
                    (::)
                        { autoGenerated = False
                        , name = properPlaylistName
                        , tracks = tracks
                        }
                        playlistsModel.collection

        newModel =
            { playlistsModel
                | collection = newCollection
                , lastModifiedPlaylist = Just properPlaylistName
            }
                |> (\m -> { model | playlists = m })
    in
    (case tracks of
        [ t ] ->
            "Added __" ++ t.title ++ "__"

        l ->
            "Added __" ++ String.fromInt (List.length l) ++ " tracks__"
    )
        |> (\s -> s ++ " to the __" ++ properPlaylistName ++ "__ playlist")
        |> Notifications.success
        |> Common.showNotificationWithModel newModel
        |> andThen (Reply.translate SavePlaylists)
