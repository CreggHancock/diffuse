module Playlists.Encoding exposing (decoder, encode, encodePlaylistTrack, playlistTrackDecoder)

import Json.Decode as Decode
import Json.Decode.Ext as Decode
import Json.Encode as Encode
import Json.Encode.Ext exposing (..)
import Maybe.Extra as Maybe exposing (isJust)
import Playlists exposing (..)



-- ENCODE


encode : Playlist -> Encode.Value
encode playlist =
    Encode.object
        [ ( "autoGenerated"
          , case playlist.autoGenerated of
                Just { level } ->
                    Encode.object
                        [ ( "level", Encode.int level ) ]

                Nothing ->
                    Encode.null
          )
        , ( "name", Encode.string playlist.name )
        , ( "public", Encode.bool playlist.public )
        , ( "tracks", Encode.list encodePlaylistTrack playlist.tracks )
        ]


encodePlaylistTrack : PlaylistTrack -> Encode.Value
encodePlaylistTrack playlistTrack =
    Encode.object
        [ ( "album", encodeMaybe playlistTrack.album Encode.string )
        , ( "artist", encodeMaybe playlistTrack.artist Encode.string )
        , ( "title", Encode.string playlistTrack.title )
        ]



-- DECODE


decoder : Decode.Decoder Playlist
decoder =
    Decode.map4 Playlist
        (Decode.field "autoGenerated" <| Decode.maybe <| Decode.map (\l -> { level = l }) <| Decode.field "level" Decode.int)
        (Decode.field "name" Decode.string)
        (Decode.optionalField "public" Decode.bool False)
        (Decode.field "tracks" <| Decode.list playlistTrackDecoder)


playlistTrackDecoder : Decode.Decoder PlaylistTrack
playlistTrackDecoder =
    Decode.map3 PlaylistTrack
        (Decode.maybe <| Decode.field "album" Decode.string)
        (Decode.maybe <| Decode.field "artist" Decode.string)
        (Decode.field "title" Decode.string)
